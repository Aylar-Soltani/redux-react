{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { fetchCountry } from '../../redux/actions';\nexport default function useCountries(searchTerm) {\n  _s();\n\n  const [countries, setCountries] = useState([]);\n  const [filteredCountries, setfilteredCountries] = useState([]);\n  const dispatch = useDispatch();\n  const {\n    allCountries\n  } = useSelector(state => state.country);\n  useEffect(() => {\n    dispatch(fetchCountry());\n  }, [dispatch]);\n  useEffect(() => {\n    let filteredData = allCountries.filter(country => {\n      var _country$nativeName;\n\n      return country.name.toLowerCase().search(searchTerm.toLowerCase()) !== -1 || ((_country$nativeName = country.nativeName) === null || _country$nativeName === void 0 ? void 0 : _country$nativeName.toLowerCase().search(searchTerm.toLowerCase())) !== -1;\n    });\n    setfilteredCountries(filteredData);\n  }, [allCountries, searchTerm]);\n  return [filteredCountries];\n}\n\n_s(useCountries, \"rUsnkZ3KOlpqZk6NEKwqKR2KHFs=\", true);","map":{"version":3,"sources":["/Users/aylarsoltani/javascript-projects/redux/redux-assignment/fs7-react-redux-typescript/src/components/hooks/useCountries.ts"],"names":["useState","useEffect","fetchCountry","useCountries","searchTerm","countries","setCountries","filteredCountries","setfilteredCountries","dispatch","useDispatch","allCountries","useSelector","state","country","filteredData","filter","name","toLowerCase","search","nativeName"],"mappings":";;AAAA,SAAeA,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AAEA,SAASC,YAAT,QAA6B,qBAA7B;AAIA,eAAe,SAASC,YAAT,CAAsBC,UAAtB,EAAwD;AAAA;;AAEnE,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAc,EAAd,CAA1C;AACA,QAAM,CAACO,iBAAD,EAAoBC,oBAApB,IAA4CR,QAAQ,CAAa,EAAb,CAA1D;AACA,QAAMS,QAAQ,GAAGC,WAAW,EAA5B;AACA,QAAM;AAACC,IAAAA;AAAD,MAAiBC,WAAW,CAAEC,KAAD,IAAoBA,KAAK,CAACC,OAA3B,CAAlC;AAEAb,EAAAA,SAAS,CAAC,MAAM;AACZQ,IAAAA,QAAQ,CAACP,YAAY,EAAb,CAAR;AACH,GAFQ,EAEN,CAACO,QAAD,CAFM,CAAT;AAKAR,EAAAA,SAAS,CAAC,MAAM;AAChB,QAAIc,YAAY,GAAGJ,YAAY,CAACK,MAAb,CAAqBF,OAAD,IAAa;AAAA;;AAChD,aACIA,OAAO,CAACG,IAAR,CAAaC,WAAb,GAA2BC,MAA3B,CAAkCf,UAAU,CAACc,WAAX,EAAlC,MAAgE,CAAC,CAAjE,IACA,wBAAAJ,OAAO,CAACM,UAAR,4EAAoBF,WAApB,GAAkCC,MAAlC,CAAyCf,UAAU,CAACc,WAAX,EAAzC,OAAuE,CAAC,CAF5E;AAIH,KALkB,CAAnB;AAMAV,IAAAA,oBAAoB,CAAEO,YAAF,CAApB;AACH,GARY,EAQX,CAACJ,YAAD,EAAeP,UAAf,CARW,CAAT;AAUA,SAAO,CAAEG,iBAAF,CAAP;AACH;;GAvBuBJ,Y","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport { Dispatch } from 'redux'\nimport { fetchCountry } from '../../redux/actions';\nimport {Country, AppState} from '../../types'\n\n\nexport default function useCountries(searchTerm: string) :[ Country[]] {\n   \n    const [countries, setCountries] = useState <Country[]> ([]);\n    const [filteredCountries, setfilteredCountries] = useState <Country[]>([]);\n    const dispatch = useDispatch()\n    const {allCountries} = useSelector((state:AppState) => state.country)\n    \n    useEffect(() => {\n        dispatch(fetchCountry())\n    }, [dispatch]);\n\n\n    useEffect(() => {\n    let filteredData = allCountries.filter((country) => {\n        return (\n            country.name.toLowerCase().search(searchTerm.toLowerCase()) !== -1 || \n            country.nativeName?.toLowerCase().search(searchTerm.toLowerCase()) !== -1\n        );\n    });\n    setfilteredCountries (filteredData);\n},[allCountries, searchTerm]);\n\n    return [ filteredCountries];     \n}\n"]},"metadata":{},"sourceType":"module"}