{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchCountry } from '../../redux/actions';\nexport default function useCountries(searchTerm) {\n  _s();\n\n  const [filteredCountries, setfilteredCountries] = useState([]);\n  const dispatch = useDispatch();\n  const {\n    allCountries\n  } = useSelector(state => state.country);\n  useEffect(() => {\n    dispatch(fetchCountry());\n  }, [dispatch]);\n  useEffect(() => {\n    let filteredData = allCountries.filter(country => {\n      var _country$nativeName;\n\n      return country.name.toLowerCase().search(searchTerm.toLowerCase()) !== -1 || ((_country$nativeName = country.nativeName) === null || _country$nativeName === void 0 ? void 0 : _country$nativeName.toLowerCase().search(searchTerm.toLowerCase())) !== -1;\n    });\n    setfilteredCountries(filteredData);\n  }, [allCountries, searchTerm]);\n  return [filteredCountries];\n}\n\n_s(useCountries, \"KbUolKNxF862+G9sHtQsHL5J2LQ=\", false, function () {\n  return [useDispatch, useSelector];\n});","map":{"version":3,"sources":["/Users/aylarsoltani/javascript-projects/redux/redux-assignment/fs7-react-redux-typescript/src/components/hooks/useCountries.ts"],"names":["useState","useEffect","useDispatch","useSelector","fetchCountry","useCountries","searchTerm","filteredCountries","setfilteredCountries","dispatch","allCountries","state","country","filteredData","filter","name","toLowerCase","search","nativeName"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,SAASC,YAAT,QAA6B,qBAA7B;AAEA,eAAe,SAASC,YAAT,CAAsBC,UAAtB,EAAuD;AAAA;;AACpE,QAAM,CAACC,iBAAD,EAAoBC,oBAApB,IAA4CR,QAAQ,CAAY,EAAZ,CAA1D;AACA,QAAMS,QAAQ,GAAGP,WAAW,EAA5B;AACA,QAAM;AAAEQ,IAAAA;AAAF,MAAmBP,WAAW,CAAEQ,KAAD,IAAqBA,KAAK,CAACC,OAA5B,CAApC;AAEAX,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,QAAQ,CAACL,YAAY,EAAb,CAAR;AACD,GAFQ,EAEN,CAACK,QAAD,CAFM,CAAT;AAIAR,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIY,YAAY,GAAGH,YAAY,CAACI,MAAb,CAAqBF,OAAD,IAAa;AAAA;;AAClD,aACEA,OAAO,CAACG,IAAR,CAAaC,WAAb,GAA2BC,MAA3B,CAAkCX,UAAU,CAACU,WAAX,EAAlC,MAAgE,CAAC,CAAjE,IACA,wBAAAJ,OAAO,CAACM,UAAR,4EAAoBF,WAApB,GAAkCC,MAAlC,CAAyCX,UAAU,CAACU,WAAX,EAAzC,OACE,CAAC,CAHL;AAKD,KANkB,CAAnB;AAOAR,IAAAA,oBAAoB,CAACK,YAAD,CAApB;AACD,GATQ,EASN,CAACH,YAAD,EAAeJ,UAAf,CATM,CAAT;AAWA,SAAO,CAACC,iBAAD,CAAP;AACD;;GArBuBF,Y;UAELH,W,EACQC,W","sourcesContent":["import { useState, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Country, AppState } from '../../types'\nimport { fetchCountry } from '../../redux/actions'\n\nexport default function useCountries(searchTerm: string): [Country[]] {\n  const [filteredCountries, setfilteredCountries] = useState<Country[]>([])\n  const dispatch = useDispatch()\n  const { allCountries } = useSelector((state: AppState) => state.country)\n\n  useEffect(() => {\n    dispatch(fetchCountry())\n  }, [dispatch])\n\n  useEffect(() => {\n    let filteredData = allCountries.filter((country) => {\n      return (\n        country.name.toLowerCase().search(searchTerm.toLowerCase()) !== -1 ||\n        country.nativeName?.toLowerCase().search(searchTerm.toLowerCase()) !==\n          -1\n      )\n    })\n    setfilteredCountries(filteredData)\n  }, [allCountries, searchTerm])\n\n  return [filteredCountries]\n}\n"]},"metadata":{},"sourceType":"module"}